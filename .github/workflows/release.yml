name: Create New Release Version

on:
  workflow_dispatch:
    inputs:
      bumpType:
        description: 'Select version bump type'
        required: true
        default: 'hotfix'
        type: choice
        options:
          - hotfix
          - minor
          - major

jobs:
  bump-version:
    runs-on: ubuntu-latest

    permissions:
      contents: write  # needed to push, merge, delete, tag

    steps:
      - name: üì• Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: üß™ Extract current version from gradle.properties
        id: get_version
        run: |
          echo "üîç Reading version from gradle.properties..."
          version=$(grep '^version=' gradle.properties | cut -d'=' -f2)
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: üî¢ Calculate new version
        id: bump
        run: |
          current=${{ steps.get_version.outputs.version }}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$current"

          case "${{ github.event.inputs.bumpType }}" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            hotfix)
              PATCH=$((PATCH + 1))
              ;;
          esac

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "üÜï New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: üå± Create release branch
        run: |
          git checkout -b release/${{ steps.bump.outputs.new_version }}

      - name: üìù Update version in gradle.properties
        run: |
          echo "‚úèÔ∏è Updating gradle.properties..."
          sed -i.bak -E "s/^version=[0-9]+\.[0-9]+\.[0-9]+/version=${{ steps.bump.outputs.new_version }}/" gradle.properties
          rm gradle.properties.bak
          git diff gradle.properties

      - name: ‚úÖ Commit version bump
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          if git diff --quiet; then
            echo "‚ö†Ô∏è No changes to commit."
            exit 0
          fi

          git add gradle.properties
          git commit -m "chore: bump version to ${{ steps.bump.outputs.new_version }}"

      - name: üöÄ Push release branch
        run: |
          git push origin release/${{ steps.bump.outputs.new_version }}

      - name: üîÄ Merge into main
        env:
          GH_TOKEN: ${{ secrets.DEPLOY_GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}
          git checkout main
          git pull origin main
          git merge --no-ff release/${{ steps.bump.outputs.new_version }} -m "Merge release/${{ steps.bump.outputs.new_version }} into main"
          git push origin main

      - name: üîñ Create Git tag v<version>
        run: |
          TAG_NAME="v${{ steps.bump.outputs.new_version }}"
          echo "üè∑ Creating tag $TAG_NAME"
          git tag $TAG_NAME
          git push origin $TAG_NAME

      - name: üßπ Delete release branch
        run: |
          git push origin --delete release/${{ steps.bump.outputs.new_version }}

  prepare:
    runs-on: ubuntu-latest
    needs: bump-version
    outputs:
      tag: ${{ steps.set-tag.outputs.tag }}
    steps:
      - name: üì¶ Checkout repository at tag
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: v${{ needs.bump-version.outputs.version }}

      - name: üîç Validate tag exists
        id: set-tag
        run: |
          TAG_NAME="v${{ needs.bump-version.outputs.version }}"
          echo "üîé Verifying that tag '$TAG_NAME' exists..."
          git fetch --tags
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "‚úÖ Tag found."
            echo "tag=$TAG_NAME" >> "$GITHUB_OUTPUT"
          else
            echo "‚ùå Tag '$TAG_NAME' does not exist."
            exit 1
          fi

  publish-core:
    runs-on: ubuntu-latest
    needs: prepare
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.tag }}

      - name: ‚òï Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
          cache: gradle

      - name: üöÄ Publish to Maven Central (core)
        run: |
          echo "üì¶ Running ./gradlew :core:test..."
          ./gradlew :core:test
          
          echo "üì¶ Running ./gradlew :core:publishAndReleaseToMavenCentral..."
          ./gradlew :core:publishAndReleaseToMavenCentral --no-configuration-cache
          
          echo "‚úÖ Publish completed successfully."

        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.SIGNING_SECRET_KEY }}
          ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.SIGNING_PASSWORD }}

  publish-boot3:
    runs-on: ubuntu-latest
    needs: prepare
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.tag }}

      - name: ‚òï Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
          cache: gradle

      - name: üöÄ Publish to Maven Central (core-boot3)
        run: |
          echo "üì¶ Running ./gradlew :core-boot3:test..."
          ./gradlew :core-boot3:test

          echo "üì¶ Running ./gradlew :core-boot3:syncAllBoot3Sources..."
          ./gradlew :core-boot3:syncAllBoot3Sources

          echo "üì¶ Running ./gradlew :core-boot3:publishAndReleaseToMavenCentral..."
          ./gradlew :core-boot3:publishAndReleaseToMavenCentral --no-configuration-cache
          
          echo "‚úÖ Publish completed successfully."

        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.SIGNING_SECRET_KEY }}
          ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.SIGNING_PASSWORD }}
